const Cactus = require('./lib/Cactus')

let bot = new Cactus({
	display_name: 'Bocisko',
	password: process.env.TS_PASS
})

bot.on('ready', () => {
	// bot.send('sendtextmessage', {
	// 	target: 1,
	// 	targetmode: 1,
	// 	msg: 'hello world'
	// }, (res) => {
	// 	console.log(res)
	// })

	/*
	bot.send('channellist', (res) => {
		for (let channel of res.body) console.log(channel.channel_name, channel.channel_order)
			
		for (let channel of res.body) {
			if (channel.pid === '0') {
				if (channel.channel_name === '[cspacerNIE USUWAĆ]-..') {
					bot.emit('index-found', parseInt(channel.channel_order), res.body)
					break
				}
			}
		}
	})

	bot.on('index-found', (index, channelList) => {
		for (let channel of channelList) {
			if (channel.pid !== '0') continue

			if (parseInt(channel.channel_order) > index) {
				bot.send('channelinfo', {cid: channel.cid}, (res) => {
					let daysEmpty = Math.round(parseInt(res.body.seconds_empty) / (60*60*24))
					console.log(channel.channel_name + ' - ' + daysEmpty)
				})
			}
		}
	})
	*/

	// print all root level channel on server and days they have been empty for
	/*
	bot.send('channellist', (res) => {
		for (let channel of res.body) {
			if (channel.pid === '0') {
				bot.send('channelinfo', {cid: channel.cid}, (res) => {
					let daysEmpty = Math.round(parseInt(res.body.seconds_empty) / (60*60*24))
					// console.log(channel.channel_name + ' - ' + daysEmpty + ' /' + res.body.seconds_empty)
				})
			}
		}
	})
	*/

	// build a list of root level channels in order after a certain one
	/*
	PREVIEW = true
	bot.send('channellist', (res) => {
		let processedCIDs = []

		function walk () {
			let afterSpacer = false
			let i = 0
			for (let channel of res.body) {
				if (afterSpacer && channel.pid === '0') {
					i = i + 1
					if (channel.channel_name.indexOf(i + '. ') !== 0 &&
						processedCIDs.indexOf(channel.cid) < 0) {
						let name
						if (channel.channel_name.indexOf('. ') > 0)
							name = i + '. ' + channel.channel_name.split('. ')[1]
						else
							name = i + '. ' + channel.channel_name
						
						if (!PREVIEW)
							bot.send('channeledit', {
								channel_name: name,
								cid: channel.cid
							}, (res) => {
								processedCIDs.push(channel.cid)

								if (res.err.msg === 'ok') walk()
								else console.log(res.err.msg, name, channel.channel_name)
							})
						else {
							processedCIDs.push(channel.cid)
							console.log(channel.channel_name + ' to ' + name)
							walk()
						}

						return
					}
				}

				if (channel.channel_name === '[cspacerNIE USUWAĆ]-..') afterSpacer = true
			}
		}

		walk()
	})
	*/

	function msg (target, msg) {
		bot.send('sendtextmessage', {
			target: target,
			targetmode: 1,
			msg: msg
		})
	}

	let HELP_CHANNEL_NAME = 'Prośby o kanał [BOT]'
	let USER_HAS_CHANNEL_ALREADY_MSG = 'wygląda na to, że masz już kanał'
	let CHANNEL_CREATED_SUCCESS_MSG = 'kanał utworzony, pamiętaj o zmianie nazwy i że zniknie on po 30 dniach nieaktywności!'
	let CHANNEL_ADMIN_GID = '5'

	bot.send('channelfind', {pattern: HELP_CHANNEL_NAME}, (res) => {
		if (res.err.id !== '0') {
			console.log('given help channel doesn\'t exist')
		} else {
			bot.register('client-moved', res.body.cid, (res) => {
				// check if client doesn't already own a channel
				// if not create a permanent channel, move him there and poke with success
				// else kick him out to default channel, poke with failure
				let clid = res.body.clid

				bot.send('clientinfo', {clid: res.body.clid}, (res) => {
					let cldbid = res.body.client_database_id
					let client_nickname = res.body.client_nickname

					bot.send('channellist', (res) => {
						
						bot.send('channelgroupclientlist',  (res) => {
							if (res.err.id === '0') {
								if (!Array.isArray(res.body)) res.body = [res.body]

								let already_owns_channel = false

								for (let set of res.body) {
									if (cldbid === set.cldbid && set.cgid === CHANNEL_ADMIN_GID) {
										bot.send('clientpoke', {
											clid: clid, 
											msg: USER_HAS_CHANNEL_ALREADY_MSG
										})
										already_owns_channel = true
										break
									}
								}

								if (!already_owns_channel) {
									bot.send('channellist', (res) => {
										let last_channel_name = res.body[res.body.length - 1].channel_name

										let channel_prefix = ''
										try {
											channel_prefix_num = last_channel_name.split('. ')[0] 
											channel_prefix_num = parseInt(channel_prefix_num) + 1
											channel_prefix = channel_prefix_num + '. '
										} catch (e) {}

										bot.send('channelcreate', {
											channel_name: channel_prefix + client_nickname,
											channel_flag_permanent: 1
										}, (res) => {

											if (res.err.id !== '0') {
												bot.send('clientpoke', {clid: clid, msg: 'coś się popsuło...' + res.err.msg})
											} else {
												bot.send('clientmove', {clid: clid, cid: res.body.cid})
												// bot.send('clientpoke', {clid: clid, msg: CHANNEL_CREATED_SUCCESS_MSG})
											}
										})
									})
								}
							}
						})
					})

				})
			})
		}
	})

	bot.register('private-message', (res) => {
		bot.send('sendtextmessage', {
			target: res.body.invokerid,
			targetmode: 1,
			msg: res.body.msg
		})
	})
})

process.stdin.on('readable', () => {
	let chunk = process.stdin.read()
	if (chunk !== null)
		bot.raw(chunk, (res) => {
			console.log(res)
		})
})
